name: Packer Build workflow

on:
  pull_request:
    branches: [ "main" ]


jobs:
  jobs1:
    name: Building custom image
    runs-on: ubuntu-latest
    env:
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      TOPIC_ID: ${{secrets.TOPIC_ID}}
      PROJECT_ID: ${{secrets.PROJECT_ID}}
      PKR_VAR_project_id: ${{secrets.PROJECT_ID}}
      PKR_VAR_source_image_family: ${{secrets.SOURCE_IMAGE_FAMILY}}
      PKR_VAR_zone: ${{secrets.IMAGE_ZONE}}
      PKR_VAR_ssh_username: ${{secrets.SSH_USERNAME}}
      PKR_VAR_network: ${{secrets.IMAGE_NETWORK}}
      PKR_VAR_image_name: ${{secrets.IMAGE_NAME}}
      PKR_VAR_image_description: ${{secrets.IMAGE_DESCRIPTION}}
      PKR_VAR_service_account_email: ${{secrets.SERVICE_ACCOUNT_EMAIL}}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
      - name: Preparing log directory
        run: |
          sudo chmod -R 733 /var/log/
      - name: Build with Maven
        run:  |
          mvn -B package --file pom.xml

      - name: GCP Credentials
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{secrets.GCP_CREDENTIALS}}'

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Run packer init
        working-directory: ./packer
        run: packer init .

      - name: Run Packer fmt
        working-directory: ./packer
        run: packer fmt -check .

      - name: Run packer validate
        working-directory: ./packer
        run: packer validate .

      - name: Run packer build
        working-directory: ./packer
        run: |
          echo "IMAGE_NAME=$(packer build . | grep -Eo 'A disk image was created in the .+ project: .+' | sed -E 's/A disk image was created in the .+ project: (.+)/\1/')" >> "$GITHUB_ENV"

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Secrets'
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
              db_name:projects/321404517735/secrets/secret-database-name/versions/1
              mysql_ip:projects/321404517735/secrets/secret-mysql-ip
              mysql_password:projects/321404517735/secrets/secret-mysql-password
              db_username:projects/321404517735/secrets/secret-user-name
              instance_key:projects/321404517735/secrets/secret-instance-key
      - name: 'Use gcloud CLI'
        run: | 
          gcloud compute instance-templates create instance-template- \
            --machine-type=n2-standard-2 \
            --instance-template-region=us-east1 \
            --create-disk=name=instance-template-boot-disk,image=$IMAGE_NAME,size=100,type=pd-balanced,auto-delete=yes,boot=true,kms-key=${{steps.secrets.outputs.instance_key}} \
            --network=projects/cloud-course-csye6225-dev/global/networks/vpc-network \
            --subnet=projects/cloud-course-csye6225-dev/regions/us-east1/subnetworks/webapp \
            --metadata=startup-script=<<-EOF
                    echo "DATABASE_URL=jdbc:mysql://${{steps.secrets.outputs.mysql_ip}}:3306/${{steps.secrets.outputs.db_name}}?createDatabaseIfNotExist=true" > .env
                    echo "DATABASE_USERNAME=${{steps.secrets.outputs.db_username}}}" >> .env
                    echo "DATABASE_PASSWORD=${{steps.secrets.outputs.mysql_password}}" >> .env
                    echo "PROJECT_ID=${var.project}" >> .env
                    echo "TOPIC_ID=${var.pubsub_topic_name}" >> .env
                    sudo chown -R csye6225:csye6225 .env
                    sudo mv .env /opt/
                  EOF \
            --tags=vm-instance